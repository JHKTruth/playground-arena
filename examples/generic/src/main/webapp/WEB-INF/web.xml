<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
-->

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" 
            xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
    
    <!-- 
    This presents a challenge because the Servlet specification requires the
    ServletRequest.getParameter*() family of methods to support form field access only for
    HTTP POST, not for HTTP PUT. To support HTTP PUT requests, the spring-web module provides the filter
    HttpPutFormContentFilter, which can be configured in web.xml.
    
    While HTTP defines these four methods, HTML only supports two: GET and POST. Fortunately, there are two possible
    workarounds: you can either use JavaScript to do your PUT or DELETE, or simply do a POST with the
    'real' method as an additional parameter (modeled as a hidden input field in an HTML form). This latter
    trick is what Spring's HiddenHttpMethodFilter does. This filter is a plain Servlet Filter and
    therefore it can be used in combination with any web framework (not just Spring MVC). Simply add this
    filter to your web.xml, and a POST with a hidden _method parameter will be converted into the
    corresponding HTTP method request.
     -->
    <filter>
        <filter-name>httpPutFormFilter</filter-name>
        <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>httpPutFormFilter</filter-name>
        <servlet-name>dispatcherServlet</servlet-name>
    </filter-mapping>
    
    <!-- 
    The filter caches the content of the rendered JSP (or other content), generates an MD5 hash over that, 
    and returns that as an ETag header in the response. The next time a client sends a request for the same 
    resource, it uses that hash as the If-None-Match value. The filter detects this, renders the view again, 
    and compares the two hashes. If they are equal, a 304 is returned. This filter will not save processing power, 
    as the view is still rendered. The only thing it saves is bandwidth, as the rendered response is not sent back 
    over the wire.
    
    Note the problems with ETags, namely couple being: 
    that they are typically constructed using attributes that make them unique to a specific server hosting a site. 
    ETags won't match when a browser gets the original component from one server and later makes a conditional GET 
    request that goes to a different serverâ€”a situation that is all too common on web sites that use a cluster of 
    servers to handle requests...1.The default format of ETags has also been cited as a possible security vulnerability. 
    It gets worse. The If-None-Match header takes precedence over If-Modified-Since.
     -->
    <filter>
        <filter-name>etagFilter</filter-name>
        <filter-class>org.springframework.web.filter.ShallowEtagHeaderFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>etagFilter</filter-name>
        <servlet-name>springMVC</servlet-name>
    </filter-mapping>
    
    <servlet>
        <servlet-name>springMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring/springMVC-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
        <multipart-config/>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>springMVC</servlet-name>
        <url-pattern>/controller/*</url-pattern>
    </servlet-mapping>
    
</web-app>